//solution1
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int> res;
        deque<int> q;
        for(int i = 0; i < nums.size(); i++)
        {
            while(q.size() && q.front() <= i - k) q.pop_front();
            while(q.size() && nums[q.back()] <= nums[i]) q.pop_back();
            q.push_back(i);
            if(i >= k - 1) res.push_back(nums[q.front()]);
        }
        return res;
    }
};

//solution2
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        const int N = 100010;
        vector<int> ans;
        int q[N];
        int hh = 0, tt = -1;
        int n = nums.size();
        for(int i = 0; i < n; i++)
        {
            while(hh <= tt && q[hh] <= i - k) hh++;
            while(hh <= tt && nums[q[tt]] <= nums[i]) tt--;
            q[++ tt] = i;
            if(i >= k - 1)  ans.push_back(nums[q[hh]]);
        }
        return ans;
    }
};
